/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 dor9.gltf 
*/

import React, { useState } from 'react'
import { useGraph, extend } from '@react-three/fiber'
import { useGLTF, Outlines, useCursor } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { RectAreaLight } from 'three'
import { useNavigate } from 'react-router-dom'
import { useControls } from 'leva'

extend({ RectAreaLight })

const Room3d  = (props) =>{
  const navigate = useNavigate()
  
  // טעינת המודל הראשי
  const { scene } = useGLTF('/model/glb/dor8.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes: mainNodes, materials: mainMaterials } = useGraph(clone)
  
  // טעינת המודל של המחשב
  const { scene: computerScene } = useGLTF('/model/glb/dor10.glb')
  const computerClone = React.useMemo(() => SkeletonUtils.clone(computerScene), [computerScene])
  const { nodes: computerNodes, materials: computerMaterials } = useGraph(computerClone)
  
  // איחוד ה-nodes וה-materials
  const nodes = { ...mainNodes, ...computerNodes }
  const materials = { ...mainMaterials, ...computerMaterials }
  
  // בקרי Leva לפוסטר
  const posterControls = useControls('פוסטר', {
    position: {
      value: [0.432, 0.529, 0.656],
      step: 0.001,
      label: 'מיקום'
    },
    rotation: {
      value: [Math.PI / 2, 0, -Math.PI / 2],
      step: 0.01,
      label: 'סיבוב'
    },
    scale: {
      value: [0.327, 0.509, 0.327],
      step: 0.001,
      min: 0.1,
      max: 1,
      label: 'גודל'
    },
    frameColor: {
      value: '#b2161e',
      label: 'צבע מסגרת'
    }
  })
  
  // בקרי Leva לתאורה
  const lightControls = useControls('תאורה', {
    intensity: {
      value: 0.0,
      min: 0,
      max: 1,
      step: 0.01,
      label: 'עוצמת תאורה'
    },
    color: {
      value: '#ffffff',
      label: 'צבע תאורה'
    }
  })
  
  const [hoverPoster, setHoverPoster] = useState(false)
  const [hoverSnack, setHoverSnack] = useState(false)
  const [hoverComputer, setHoverComputer] = useState(false)
  const [hoverScreen, setHoverScreen] = useState(false)
  const [hoverTV, setHoverTV] = useState(false)
  const [hoverJoystick, setHoverJoystick] = useState(false)

  // const lampControls = useControls('תאורת מנורה', {
  //   pointLightIntensity: { value: 0.9, min: 0, max: 5, step: 0.1, label: 'עוצמת נקודת אור' },
  //   pointLightDistance: { value: 1.0, min: 0, max: 10, step: 0.1, label: 'מרחק נקודת אור' },
  //   pointLightDecay: { value: 2.0, min: 0, max: 5, step: 0.1, label: 'דעיכת נקודת אור' },
  //   pointLightColor: { value: '#ffd28d', label: 'צבע נקודת אור' },
  //   
  //   spotLightIntensity: { value: 2.5, min: 0, max: 5, step: 0.1, label: 'עוצמת ספוט' },
  //   spotLightAngle: { value: 0.9, min: 0, max: Math.PI, step: 0.1, label: 'זווית ספוט' },
  //   spotLightPenumbra: { value: 0.4, min: 0, max: 1, step: 0.1, label: 'פנומברה ספוט' },
  //   spotLightColor: { value: '#ffd28d', label: 'צבע ספוט' },
  //   spotLightDecay: { value: 1.6, min: 0, max: 5, step: 0.1, label: 'דעיכת ספוט' }
  // })

  // const ambientLightControls = useControls('תאורת סביבה', {
  //   ambientLightIntensity: { value: 0.0, min: 0, max: 2, step: 0.1, label: 'עוצמת תאורת סביבה' },
  //   ambientLightColor: { value: '#ffffff', label: 'צבע תאורת סביבה' }
  // })

  useCursor(hoverPoster || hoverSnack || hoverComputer || hoverTV || hoverJoystick || hoverScreen)

  return (
    <group {...props} dispose={null}>
      <group position={[0.759, -0.001, 0.023]} rotation={[-Math.PI, 1.379, -Math.PI]} scale={0.637}>
        {Object.entries(nodes).map(([key, node]) => {
          if (key.startsWith('Key') || key.startsWith('Numpad') || key.startsWith('Plane001')) {
            return (
              <mesh
                key={key}
                name={key}
                geometry={node.geometry}
                morphTargetDictionary={node.morphTargetDictionary}
                morphTargetInfluences={node.morphTargetInfluences}
                position={node.position}
                rotation={node.rotation}
                scale={node.scale || [1, 1, 1.424]}
              >
                <meshStandardMaterial
                  color="#000000"
                  roughness={0.5}
                  metalness={0.5}
                />
              </mesh>
            );
          }
          return null;
        })}
        
        <group position={[0.147, 0.002, -0.042]}>
          <primitive object={nodes.Bone} />
          <skinnedMesh 
            geometry={nodes.Paw.geometry} 
            skeleton={nodes.Paw.skeleton}
          >
            <meshStandardMaterial
              color="#000000"
              roughness={0.5}
              metalness={0.5}
            />
          </skinnedMesh>
        </group>
      </group>


      <group position={[0.777, -0.003, 0.336]} rotation={[0, 1.16, 0]} scale={0.634}
        onPointerOver={() => setHoverJoystick(true)}
        onPointerOut={() => setHoverJoystick(false)}>
        <mesh geometry={nodes.analogic_buttons.geometry} material={materials.ps3_matte_plastic} position={[0, 0.054, 0.008]} rotation={[-0.172, 0, 0]}>
          {hoverJoystick && <Outlines thickness={4} color="#f1eded" />}
        </mesh>
        <mesh geometry={nodes.base.geometry} material={materials.ps3_glossy_plastic} position={[0, 0.056, 0.009]} rotation={[-0.172, 0, 0]}>
          {hoverJoystick && <Outlines thickness={4} color="#f1eded" />}
        </mesh>
        <mesh geometry={nodes.button_id.geometry} material={materials.ps3_btn_lightpink} position={[0.035, 0.051, -0.055]} rotation={[-0.172, 0, 0]}>
          {hoverJoystick && <Outlines thickness={4} color="#f1eded" />}
        </mesh>
        <mesh geometry={nodes.button_id001.geometry} material={materials.ps3_btn_lightgreen} position={[0.049, 0.047, -0.069]} rotation={[-0.172, 0, 0]}>
          {hoverJoystick && <Outlines thickness={4} color="#f1eded" />}
        </mesh>
        <mesh geometry={nodes.button_id002.geometry} material={materials.ps3_btn_lightblue} position={[0.049, 0.05, -0.041]} rotation={[-0.172, 0, 0]}>
          {hoverJoystick && <Outlines thickness={4} color="#f1eded" />}
        </mesh>
        <mesh geometry={nodes.button_id003.geometry} material={materials.ps3_btn_red} position={[0.062, 0.048, -0.054]} rotation={[-0.172, 0, 0]}>
          {hoverJoystick && <Outlines thickness={4} color="#f1eded" />}
        </mesh>
        <mesh geometry={nodes.cuts001.geometry} material={materials.ps_icon} position={[0, 0.044, -0.044]} rotation={[-0.172, 0, 0]}>
          {hoverJoystick && <Outlines thickness={4} color="#f1eded" />}
        </mesh>
        <mesh geometry={nodes.cuts002.geometry} material={materials.ps3_black_glossy} position={[-0.048, 0.044, -0.054]} rotation={[-0.172, 0, 0]}>
          {hoverJoystick && <Outlines thickness={4} color="#f1eded" />}
        </mesh>
        <mesh geometry={nodes.directional.geometry} material={materials.ps3_glossy_plastic} position={[-0.049, 0.043, -0.063]} rotation={[-0.172, 0, 0]}>
          {hoverJoystick && <Outlines thickness={4} color="#f1eded" />}
        </mesh>
        <mesh geometry={nodes.primary_buttons.geometry} material={materials.ps3_glossy_plastic} position={[0.049, 0.043, -0.067]} rotation={[-0.172, 0, 0]}>
          {hoverJoystick && <Outlines thickness={4} color="#f1eded" />}
        </mesh>
        <mesh geometry={nodes.r_buttons.geometry} material={materials.ps3_matte_plastic} position={[0, 0.059, 0.006]} rotation={[-0.172, 0, 0]}>
          {hoverJoystick && <Outlines thickness={4} color="#f1eded" />}
        </mesh>
        <mesh geometry={nodes.r_buttons001.geometry} material={materials.ps3_glossy_plastic} position={[0, 0.056, 0.009]} rotation={[-0.172, 0, 0]}>
          {hoverJoystick && <Outlines thickness={4} color="#f1eded" />}
        </mesh>
        <mesh geometry={nodes.secondary_buttons.geometry} material={materials.ps3_glossy_plastic} position={[-0.015, 0.045, -0.054]} rotation={[-0.172, 0, 0]}>
          {hoverJoystick && <Outlines thickness={4} color="#f1eded" />}
        </mesh>
        <mesh geometry={nodes.Sphere001.geometry} material={materials.glass} rotation={[-0.172, 0, 0]}>
          {hoverJoystick && <Outlines thickness={4} color="#f1eded" />}
        </mesh>
      </group>


      
      <group position={[1.074, -0.41, -0.134]} rotation={[0, -0.942, 0]} scale={0.437}>
        <mesh geometry={nodes.Button.geometry} material={materials.Office_Plastic_Mat} />
        <mesh geometry={nodes.Holder.geometry} material={materials.Office_Plastic_Mat} />
        <mesh geometry={nodes.Mechanisim.geometry} material={materials.Office_Metal_Mat} />
        <mesh geometry={nodes.Mechanisim_b.geometry} material={materials.Office_Metal_Mat} />
        <mesh geometry={nodes.Metal_Holder.geometry} material={materials.Office_Metal_Mat} />
        <mesh geometry={nodes.Metal_pipe_control.geometry} material={materials.Office_Metal_Mat} />
        <mesh geometry={nodes.Pipe_holder.geometry} material={materials.Office_Plastic_Mat} />
        <mesh geometry={nodes.Pipe_UpDown.geometry} material={materials.Office_Pipe_Mat} />
        <mesh geometry={nodes.Pipe_UpDown_control.geometry} material={materials.Office_Metal_Mat} />
        <mesh geometry={nodes.UpDown.geometry} material={materials.Office_Plastic_Mat} />
        <mesh geometry={nodes.Mesh019.geometry} material={materials.Office_Wheel_Mat} />
        <mesh geometry={nodes.Mesh019_1.geometry} material={materials.Office_Wheel_Metal_Mat} />
        <mesh geometry={nodes.Mesh020.geometry} material={materials.Office_Wheel_Mat} />
        <mesh geometry={nodes.Mesh020_1.geometry} material={materials.Office_Wheel_Metal_Mat} />
        <mesh geometry={nodes.Mesh021.geometry} material={materials.Office_Wheel_Mat} />
        <mesh geometry={nodes.Mesh021_1.geometry} material={materials.Office_Wheel_Metal_Mat} />
        <mesh geometry={nodes.Mesh022.geometry} material={materials.Office_Wheel_Mat} />
        <mesh geometry={nodes.Mesh022_1.geometry} material={materials.Office_Wheel_Metal_Mat} />
        <mesh geometry={nodes.Mesh023.geometry} material={materials.Office_Wheel_Mat} />
        <mesh geometry={nodes.Mesh023_1.geometry} material={materials.Office_Wheel_Metal_Mat} />
        <mesh geometry={nodes.Screw.geometry} material={materials.Office_Metal_Mat} />
        <mesh geometry={nodes.Screw10.geometry} material={materials.Office_Metal_Mat} />
        <mesh geometry={nodes.Screw11.geometry} material={materials.Office_Metal_Mat} />
        <mesh geometry={nodes.Screw6.geometry} material={materials.Office_Metal_Mat} />
        <mesh geometry={nodes.Screw7.geometry} material={materials.Office_Metal_Mat} />
        <mesh geometry={nodes.Screw8.geometry} material={materials.Office_Metal_Mat} />
        <mesh geometry={nodes.Screw9.geometry} material={materials.Office_Metal_Mat} />
        <mesh geometry={nodes.Mesh008.geometry} material={materials['Black fabric']} />
        <mesh geometry={nodes.Mesh008_1.geometry} material={materials.Office_Plastic_Mat} />
        <mesh geometry={nodes.Mesh007.geometry} material={materials['Black fabric']} />
        <mesh geometry={nodes.Mesh007_1.geometry} material={materials.Office_Plastic_Mat} />
      </group>
      <group position={[1.1, -0.109, 0]} scale={0.47}>
        <mesh geometry={nodes.zhuozi001.geometry} material={materials['21___Default']} position={[-0.92, -0.68, 0]} />
      </group>

      {/* מנורה */}
      <group position={[0.501, 0, 0.394]} rotation={[Math.PI, -0.418, Math.PI]} scale={0.101}>
        <mesh geometry={nodes.Cylinder.geometry} material={materials['Lampe gelb']} position={[0, 0.027, 0]} scale={5.052} />
        <group position={[0.237, 0.696, 0]} scale={5.052}>
          <mesh geometry={nodes.Cylinder037.geometry} material={materials['Lampe Schwarz']} />
          <mesh geometry={nodes.Cylinder037_1.geometry} material={materials['Lampe gelb']} />
        </group>
        <mesh geometry={nodes.Cylinder002.geometry} material={materials['Lampe Schwarz']} position={[0.237, 1.391, 0]} scale={5.052} />
        <group position={[-0.835, 2.004, 0]} scale={5.052}>
          <mesh geometry={nodes.Cylinder039.geometry} material={materials['Lampe gelb']} />
          <mesh geometry={nodes.Cylinder039_1.geometry} material={materials['Material.004']} />
        </group>
        <mesh geometry={nodes.Cylinder004.geometry} material={materials['Lampe Schwarz']} position={[-0.835, 2.004, 0]} scale={5.052} />
        <mesh geometry={nodes.Cylinder005.geometry} material={materials['Lampe Schwarz']} position={[-0.414, 1.787, 0]} rotation={[0, 0, -1.745]} scale={5.052} />
        <mesh geometry={nodes.Cylinder006.geometry} material={materials['Lampe Schwarz']} position={[0.059, 1.688, 0]} rotation={[0, 0, -0.175]} scale={5.052} />
        <mesh geometry={nodes.Cylinder007.geometry} material={materials.Schraube} position={[0.274, 1.259, 0.062]} rotation={[Math.PI / 2, 0, -Math.PI / 6]} scale={5.052} />
        <group position={[0.249, 0.353, 0.077]} rotation={[Math.PI / 2, 0, -0.175]} scale={5.052}>
          <mesh geometry={nodes.Cylinder062.geometry} material={materials['Material.001']} />
          <mesh geometry={nodes.Cylinder062_1.geometry} material={materials['Material.003']} />
        </group>
        <mesh geometry={nodes.Cylinder009.geometry} material={materials.Schraube} position={[0.237, 0.059, 0]} scale={5.052} />
        <mesh geometry={nodes.Cylinder010.geometry} material={materials.glas} rotation={[0, 0, -0.175]} scale={5.052}>
          <pointLight
            intensity={0.9}
            distance={1.0}
            decay={2.0}
            color="#ffd28d"
            castShadow
          />
          <spotLight
            position={[0, 0.2, 0]}
            angle={0.9}
            penumbra={0.4}
            intensity={2.5}
            color="#ffd28d"
            castShadow
            decay={1.6}
          />
        </mesh>
        <mesh geometry={nodes.Cylinder011.geometry} material={materials.Schraube} position={[-0.575, 1.816, 0]} rotation={[0, 0, -0.175]} scale={5.052} />
        <mesh geometry={nodes.Cylinder012.geometry} material={materials['Material.002']} position={[-0.861, 1.896, -0.037]} rotation={[-0.875, 0.135, -1.559]} scale={[0.134, 1.287, 0.099]} />
        <mesh geometry={nodes.Cylinder013.geometry} material={materials['Material.002']} position={[-0.859, 1.91, 0.019]} rotation={[0.396, -0.068, 1.533]} scale={[-0.134, -1.287, -0.099]} />
        <mesh geometry={nodes.Cylinder014.geometry} material={materials['Material.002']} position={[-0.873, 1.827, -0.019]} rotation={[-2.746, 0.068, 1.855]} scale={[-0.134, -1.287, -0.099]} />
        <mesh geometry={nodes.Cylinder015.geometry} material={materials['Material.002']} position={[-0.871, 1.841, 0.036]} rotation={[2.267, -0.135, -1.336]} scale={[0.134, 1.287, 0.099]} />
        <mesh geometry={nodes.Cylinder016.geometry} material={materials.glas} position={[-0.814, 1.858, 0]} rotation={[0, 0, -1.745]} scale={5.052} />
      </group>
      <group position={[0.404, -0.085, 0.264]} rotation={[-3.096, 1.537, 0]}>
        <mesh geometry={nodes['220v_cable'].geometry} material={materials.Plastik_Schwarz} position={[0, -0.315, 0.018]} />
        <mesh geometry={nodes['220v_cable001'].geometry} material={materials.Plastik_Schwarz} position={[-0.247, -0.304, 0.026]} />
        <mesh geometry={nodes['220v_cable002'].geometry} material={materials.Plastik_Schwarz} position={[-0.133, -0.309, 0.022]} />
      </group>



      
      {/* מחשב חדש */}
      <group position={[0.469, 0.618, 0.003]} rotation={[0, Math.PI / 2, 0]} scale={0.562}>
        <group position={[0, 0.363, -0.024]}>
          {/* מסך המחשב */}
      <group 
            position={[0.005, -1.192, 0.108]} 
            scale={[0.47, 0.542, 0.798]}
            onPointerOver={() => setHoverComputer(true)}
            onPointerOut={() => setHoverComputer(false)}>
            {/* מסגרת המסך */}
          <mesh 
              geometry={nodes.computer_screen002_1.geometry} 
              material={materials.frame}>
            {hoverComputer && <Outlines thickness={6} color="#f1eded" />}
          </mesh>
            {/* מסך המחשב עצמו */}
          <mesh 
              geometry={nodes.computer_screen002_2.geometry} 
              material={materials['Screen (tv).001']}>
            {hoverComputer && <Outlines thickness={6} color="#f1eded" />}
          </mesh>
          </group>
          
          {/* מסך הטלוויזיה */}
          <group 
            position={[0, -0.345, 0]} 
            scale={[1, 1, 1.699]}
            onPointerOver={() => setHoverTV(true)}
            onPointerOut={() => setHoverTV(false)}>
            {/* מסגרת הטלוויזיה */}
            <mesh 
              geometry={nodes.TV_1.geometry} 
              material={materials.frame}>
              {hoverTV && <Outlines thickness={6} color="#f1eded" />}
            </mesh>
            {/* מסך הטלוויזיה עצמו */}
          <mesh 
              geometry={nodes.TV_2.geometry} 
              material={materials['Screen (tv)']}>
              {hoverTV && <Outlines thickness={6} color="#f1eded" />}
          </mesh>
          </group>
        </group>
      </group>

      {/* בסיס המסך */}
      <group position={[-0.275, 0.161, -3.164]}>
        <group 
          position={[0.777, -0.162, 3.153]} 
          rotation={[0, Math.PI / 2, 0]} 
          scale={0.43}
          onPointerOver={() => setHoverComputer(true)}
          onPointerOut={() => setHoverComputer(false)}>
          {/* חלקי הבסיס */}
          <mesh 
            geometry={nodes.Circle004.geometry} 
            material={materials['monitor_plastic.001']}>
            {hoverComputer && <Outlines thickness={6} color="#f1eded" />}
          </mesh>
          <mesh 
            geometry={nodes.Circle004_1.geometry} 
            material={materials['monitor_metal white.001']}>
            {hoverComputer && <Outlines thickness={6} color="#f1eded" />}
          </mesh>
          <mesh 
            geometry={nodes.Circle004_2.geometry} 
            material={materials['monitor_metal 01.001']}>
            {hoverComputer && <Outlines thickness={6} color="#f1eded" />}
          </mesh>
        </group>
      </group>



      <group position={[0.692, 0.086, -0.321]} rotation={[-3.073, 0.865, -1.886]} scale={0.05}
        onPointerOver={() => setHoverSnack(true)}
        onPointerOut={() => setHoverSnack(false)}>
        <mesh geometry={nodes.Cube008.geometry} 
          material={materials.CheetosBag} 
          position={[-1.136, 0.411, 0.06]} 
          rotation={[Math.PI / 2, -1.493, Math.PI / 2]} 
          scale={[1.187, 1, 1]}>
          {hoverSnack && <Outlines thickness={5} color="#f1eded" />}
        </mesh>
      </group>
      <mesh geometry={nodes.Cube.geometry} material={materials['Wall paint']} position={[0.363, 0.33, 0.357]} rotation={[-Math.PI, 0, 0]} scale={[-0.038, -0.757, -0.975]} />
      <mesh geometry={nodes.Cube001.geometry} material={materials['Wall paint']} position={[1.266, 0.33, -0.586]} rotation={[Math.PI, -Math.PI / 2, 0]} scale={[-0.038, -0.757, -0.943]} />
      <mesh geometry={nodes.Plane.geometry} material={materials['Light Floor Tiling']} position={[1.318, -0.429, 0.382]} scale={0.979} />
      <mesh geometry={nodes.Cube003.geometry} material={materials['Plastic Black 4']} position={[1.03, 0.525, -0.586]} rotation={[0, Math.PI / 2, 0]} scale={[0.055, 0.388, 0.242]} />
      <mesh geometry={nodes.Cube004.geometry} material={materials['Plastic Black 4']} position={[1.03, 0.165, -0.569]} scale={[0.241, 0.007, 0.063]} />
      <mesh geometry={nodes.Cube005.geometry} material={materials['Plastic Grey 22']} position={[1.023, 0.682, -0.525]} rotation={[0.332, 0, 0]} scale={[0.241, 0.001, 0.005]} />
      <mesh geometry={nodes.Cube006.geometry} material={materials['Plastic Grey 22']} position={[1.023, 0.645, -0.525]} rotation={[0.332, 0, 0]} scale={[0.241, 0.001, 0.005]} />
      <mesh geometry={nodes.Cube007.geometry} material={materials['Plastic Black 4']} position={[1.03, 0.884, -0.56]} scale={[0.241, 0.017, 0.049]} />
      <mesh geometry={nodes.Plane001.geometry} material={materials['Procedural Glass for Windows']} position={[1.028, 0.521, -0.618]} rotation={[Math.PI / 2, 0, 0]} scale={[0.233, 1, 0.377]} />


      <group position={[-6.52, -2.233, -3.312]} scale={0.126}>
        <mesh geometry={nodes.Mesh024.geometry} material={materials['glass.001']} />
        <mesh geometry={nodes.Mesh024_1.geometry} material={materials['glass.002']} />
        <mesh geometry={nodes.Mesh024_2.geometry} material={materials['Material.008']} />
        <mesh geometry={nodes.Mesh024_3.geometry} material={materials['metal black']} />
        <mesh geometry={nodes.Mesh024_4.geometry} material={materials['wall white.001']} />
        <mesh geometry={nodes.Mesh024_5.geometry} material={materials['wall white.002']} />
        <mesh geometry={nodes.Mesh024_6.geometry} material={materials.plane_diffuse} />
      </group>


      <group position={[-1.446, -2.233, -3.312]} scale={0.126}>
        <mesh geometry={nodes.Mesh025.geometry} material={materials['glass.001']} />
        <mesh geometry={nodes.Mesh025_1.geometry} material={materials['glass.002']} />
        <mesh geometry={nodes.Mesh025_2.geometry} material={materials['Material.008']} />
        <mesh geometry={nodes.Mesh025_3.geometry} material={materials['metal black']} />
        <mesh geometry={nodes.Mesh025_4.geometry} material={materials['wall white.001']} />
        <mesh geometry={nodes.Mesh025_5.geometry} material={materials['wall white.002']} />
        <mesh geometry={nodes.Mesh025_6.geometry} material={materials.plane_diffuse} />
      </group>

    {/* חלונות */}
      <group>
        <mesh geometry={nodes.Plane002.geometry} position={[-0.338, 0.98, -3.275]} rotation={[Math.PI / 2, 0, 0]} scale={[0.087, 1.138, 0.128]}>
          <meshStandardMaterial color="#0a0a0a" transparent opacity={0.9} emissive="#0a1a2a" emissiveIntensity={0.2} />
        </mesh>
        <mesh geometry={nodes.Plane003.geometry} position={[-0.935, 0.589, -3.275]} rotation={[Math.PI / 2, 0, 0]} scale={[0.087, 1.138, 0.128]}>
          <meshStandardMaterial color="#0a0a0a" transparent opacity={0.9} emissive="#0a1a2a" emissiveIntensity={0.2} />
        </mesh>
        <mesh geometry={nodes.Plane004.geometry} position={[-0.122, -0.16, -3.275]} rotation={[Math.PI / 2, 0, 0]} scale={[0.087, 1.138, 0.128]}>
          <meshStandardMaterial color="#0a0a0a" transparent opacity={0.9} emissive="#0a1a2a" emissiveIntensity={0.2} />
        </mesh>
        <mesh geometry={nodes.Plane005.geometry} position={[-1.146, -0.157, -3.275]} rotation={[Math.PI / 2, 0, 0]} scale={[0.087, 1.138, 0.128]}>
          <meshStandardMaterial color="#0a0a0a" transparent opacity={0.9} emissive="#0a1a2a" emissiveIntensity={0.2} />
        </mesh>
        <mesh geometry={nodes.Plane006.geometry} position={[-0.335, -0.537, -3.275]} rotation={[Math.PI / 2, 0, 0]} scale={[0.087, 1.138, 0.128]}>
          <meshStandardMaterial color="#0a0a0a" transparent opacity={0.9} emissive="#0a1a2a" emissiveIntensity={0.2} />
        </mesh>
        <mesh geometry={nodes.Plane007.geometry} position={[-0.926, -0.883, -3.275]} rotation={[Math.PI / 2, 0, 0]} scale={[0.087, 1.138, 0.128]}>
          <meshStandardMaterial color="#0a0a0a" transparent opacity={0.9} emissive="#0a1a2a" emissiveIntensity={0.2} />
        </mesh>
        <mesh geometry={nodes.Plane008.geometry} position={[0.697, -0.916, -3.275]} rotation={[Math.PI / 2, 0, 0]} scale={[0.087, 1.138, 0.128]}>
          <meshStandardMaterial color="#0a0a0a" transparent opacity={0.9} emissive="#0a1a2a" emissiveIntensity={0.2} />
        </mesh>
        <mesh geometry={nodes.Plane009.geometry} position={[0.469, 0.22, -3.275]} rotation={[Math.PI / 2, 0, 0]} scale={[0.087, 1.138, 0.128]}>
          <meshStandardMaterial color="#0a0a0a" transparent opacity={0.9} emissive="#0a1a2a" emissiveIntensity={0.2} />
        </mesh>
        <mesh geometry={nodes.Plane010.geometry} position={[0.472, -0.16, -3.275]} rotation={[Math.PI / 2, 0, 0]} scale={[0.087, 1.138, 0.128]}>
          <meshStandardMaterial color="#0a0a0a" transparent opacity={0.9} emissive="#0a1a2a" emissiveIntensity={0.2} />
        </mesh>
      </group>

      {/* פוסטר */}
      <group 
        position={posterControls.position} 
        rotation={posterControls.rotation} 
        scale={posterControls.scale}
        onPointerOver={() => setHoverPoster(true)}
        onPointerOut={() => setHoverPoster(false)}
        onClick={() => navigate('/poster')}
        style={{ cursor: 'pointer' }}>
        <mesh geometry={nodes.Plane010_1.geometry} material={materials.frame_wood}>
        <meshStandardMaterial color={posterControls.frameColor} />
          {hoverPoster && <Outlines thickness={6} color="#f1eded" />}
        </mesh>
        <mesh geometry={nodes.Plane010_2.geometry} material={materials.Poster}>
          {hoverPoster && <Outlines thickness={6} color="#f1eded" />}
        </mesh>
      </group>

      <ambientLight intensity={lightControls.intensity} color={lightControls.color} />
    </group>
  )
}

useGLTF.preload('/model/glb/dor8.glb')
useGLTF.preload('/model/glb/dor10.glb')

export default Room3d